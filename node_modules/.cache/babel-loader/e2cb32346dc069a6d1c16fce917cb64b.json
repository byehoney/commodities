{"remainingRequest":"/Users/yanghaiqiang/Documents/testPro/commodities/node_modules/babel-loader/lib/index.js!/Users/yanghaiqiang/Documents/testPro/commodities/node_modules/eslint-loader/index.js??ref--13-0!/Users/yanghaiqiang/Documents/testPro/commodities/src/axios/http.js","dependencies":[{"path":"/Users/yanghaiqiang/Documents/testPro/commodities/src/axios/http.js","mtime":1557109635373},{"path":"/Users/yanghaiqiang/Documents/testPro/commodities/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanghaiqiang/Documents/testPro/commodities/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yanghaiqiang/Documents/testPro/commodities/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Promise from \"/Users/yanghaiqiang/Documents/testPro/commodities/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport axios from 'axios';\nimport qs from 'qs';\nimport store from 'store/index';\nimport { Indicator, Toast } from 'mint-ui';\naxios.defaults.timeout = 12000; // 请求超时时间\n\naxios.defaults.baseURL = process.env.VUE_APP_BASE_API;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8'; // post请求头的设置\n// axios 请求拦截器\n\naxios.interceptors.request.use(function (config) {\n  // 可在此设置要发送的token\n  var token = store.getters['login/token'];\n  token && (config.headers.token = token);\n  Indicator.open('数据加载中');\n  return config;\n}, function (error) {\n  return _Promise.error(error);\n}); // axios respone拦截器\n\naxios.interceptors.response.use(function (response) {\n  // 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据\n  // 否则的话抛出错误 结合自身业务和后台返回的接口状态约定写respone拦截器\n  Indicator.close();\n\n  if (response.status === 200 && response.data.code === 0) {\n    return _Promise.resolve(response);\n  } else {\n    Toast({\n      message: response.data.msg,\n      position: 'middle',\n      duration: 2000\n    });\n    return _Promise.reject(response);\n  }\n}, function (error) {\n  Indicator.close();\n  var responseCode = error.response.status;\n\n  switch (responseCode) {\n    // 401：未登录\n    case 401:\n      break;\n    // 404请求不存在\n\n    case 404:\n      Toast({\n        message: '网络请求不存在',\n        position: 'middle',\n        duration: 2000\n      });\n      break;\n\n    default:\n      Toast({\n        message: error.response.data.message,\n        position: 'middle',\n        duration: 2000\n      });\n  }\n\n  return _Promise.reject(error.response);\n});\n/**\n * 封装get方法，对应get请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\n\nfunction get(url) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new _Promise(function (resolve, reject) {\n    axios.get(url, {\n      params: params\n    }).then(function (res) {\n      resolve(res.data);\n    }).catch(function (err) {\n      reject(err.data);\n    });\n  }); // 或者return axios.get();\n}\n/**\n * post方法，对应post请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\n\n\nfunction post(url, params) {\n  return new _Promise(function (resolve, reject) {\n    axios.post(url, qs.stringify(params)).then(function (res) {\n      resolve(res.data);\n    }).catch(function (err) {\n      reject(err.data);\n    });\n  }); //  或者return axios.post();\n}\n\nexport { get, post };",{"version":3,"sources":["/Users/yanghaiqiang/Documents/testPro/commodities/src/axios/http.js"],"names":["axios","qs","store","Indicator","Toast","defaults","timeout","baseURL","process","env","VUE_APP_BASE_API","headers","post","interceptors","request","use","config","token","getters","open","error","response","close","status","data","code","resolve","message","msg","position","duration","reject","responseCode","get","url","params","then","res","catch","err","stringify"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport qs from 'qs'\nimport store from 'store/index'\nimport { Indicator, Toast } from 'mint-ui'\naxios.defaults.timeout = 12000 // 请求超时时间\naxios.defaults.baseURL = process.env.VUE_APP_BASE_API\n\naxios.defaults.headers.post['Content-Type'] =\n    'application/x-www-form-urlencoded;charset=UTF-8' // post请求头的设置\n// axios 请求拦截器\naxios.interceptors.request.use(\n    config => {\n        // 可在此设置要发送的token\n        let token = store.getters['login/token'];\n        token && (config.headers.token = token)\n        Indicator.open('数据加载中')\n        return config\n    },\n    error => {\n        return Promise.error(error)\n    }\n)\n// axios respone拦截器\naxios.interceptors.response.use(\n    response => {\n        // 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据\n        // 否则的话抛出错误 结合自身业务和后台返回的接口状态约定写respone拦截器\n        Indicator.close()\n        if (response.status === 200 && response.data.code === 0) {\n            return Promise.resolve(response)\n        } else {\n            Toast({\n                message: response.data.msg,\n                position: 'middle',\n                duration: 2000\n            });\n            return Promise.reject(response)\n        }\n    },\n    error => {\n        Indicator.close()\n        const responseCode = error.response.status\n        switch (responseCode) {\n            // 401：未登录\n            case 401:\n                break\n            // 404请求不存在\n            case 404:\n                Toast({\n                    message: '网络请求不存在',\n                    position: 'middle',\n                    duration: 2000\n                });\n                break\n            default:\n                Toast({\n                    message: error.response.data.message,\n                    position: 'middle',\n                    duration: 2000\n                });\n        }\n        return Promise.reject(error.response)\n    }\n)\n/**\n * 封装get方法，对应get请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\nfunction get (url, params = {}) {\n    return new Promise((resolve, reject) => {\n        axios\n            .get(url, {\n                params: params\n            })\n            .then(res => {\n                resolve(res.data)\n            })\n            .catch(err => {\n                reject(err.data)\n            })\n    })\n    // 或者return axios.get();\n}\n/**\n * post方法，对应post请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\nfunction post (url, params) {\n    return new Promise((resolve, reject) => {\n        axios\n            .post(url, qs.stringify(params))\n            .then(res => {\n                resolve(res.data)\n            })\n            .catch(err => {\n                reject(err.data)\n            })\n    })\n    //  或者return axios.post();\n}\n\nexport { get, post }\n"]}]}